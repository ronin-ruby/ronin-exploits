# frozen_string_literal: true
#
# ronin-exploits - A Ruby library for ronin-rb that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2025 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# ronin-exploits is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ronin-exploits is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with ronin-exploits.  If not, see <https://www.gnu.org/licenses/>.
#

require 'ronin/core/cli/text/params'

module Ronin
  module Exploits
    class CLI
      #
      # Helper methods for generating display text.
      #
      # @since 1.2.0
      #
      module Text
        include Core::CLI::Text::Params

        # Known exploit types and their printable names.
        EXPLOIT_TYPE_NAMES = {
          exploit: 'Custom',

          # generic exploits
          auth_bypass:    'Auth Bypass',
          path_traversal: 'Path Traversal',

          # memory corruption exploits
          memory_corruption: 'Memory Corruption',
          stack_overflow:    'Stack Overflow',
          seh_overflow:      'SEH Overflow',
          heap_overflow:     'Heap Overflow',
          use_after_free:    'Use After Free',

          # web exploits
          web:  'Web',
          lfi:  'Local File Inclusion (LFI)',
          rfi:  'Remote File Inclusion (RFI)',
          sqli: 'SQL injection (SQLI)',
          xss:  'Cross-Site Scripting (XSS)',
          open_redirect: 'Open Redirect',
          ssti: 'Server-Side Template Injection (SSTI)'
        }

        #
        # Returns the exploit type display name for the exploit class.
        #
        # @param [Class<Exploit>] exploit_class
        #
        # @return [String]
        #
        def exploit_type_name(exploit_class)
          EXPLOIT_TYPE_NAMES.fetch(exploit_class.exploit_type,'unknown')
        end

        #
        # Builds an example `ronin-exploits run` command for the exploit.
        #
        # @param [Class<Exploit>] exploit_class
        #   The exploit class.
        #
        # @param [String, nil] file
        #   The optional file that was the exploit was loaded from.
        #
        # @return [String]
        #   The example `ronin-exploits run` command.
        #
        def example_exploit_command(exploit_class, file: nil)
          command = ['ronin-exploits', 'run']

          if file
            command << '-f' << file
          else
            command << exploit_class.id
          end

          exploit_class.params.each_value do |param|
            if param.required? && !param.default
              command << '-p' << "#{param.name}=#{param_usage(param)}"
            end
          end

          return command.join(' ')
        end
      end
    end
  end
end
