# frozen_string_literal: true
#
# ronin-exploits - A Ruby library for ronin-rb that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2024 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# ronin-exploits is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ronin-exploits is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with ronin-exploits.  If not, see <https://www.gnu.org/licenses/>.
#

require_relative '../remote_tcp'
require_relative '../version_detection'

require 'ronin/support/text/patterns/software'

module Ronin
  module Exploits
    module Mixins
      module VersionDetection
        #
        # Mixin which detects the target system's software version from the
        # services banner text.
        #
        # @since 1.2.0
        #
        # @api public
        #
        module BannerVersion
          include VersionDetection

          #
          # Includes {RemoteTCP} in the exploit including {BannerVersion}.
          #
          # @param [Class<Exploit>] exploit
          #   The exploit including {BannerVersion}.
          #
          # @api private
          #
          def self.included(exploit)
            exploit.include RemoteTCP
          end

          #
          # Attempts to detect the target system's software version from the
          # service's banner text.
          #
          # @param [String] host
          #   The host to connect to.
          #
          # @param [Integer] port
          #   The port to connect to.
          #
          # @param [Hash{Symbol => Object}] kwargs
          #   Additional keyword arguments for {RemoteTCP#tcp_banner}.
          #
          # @option kwargs [String] :bind_host (params[:bind_host])
          #   The local host to bind to.
          #
          # @option kwargs [Integer] :bind_port (params[:bind_port])
          #   The local port to bind to.
          #
          # @return [String, nil]
          #   The detected version string or `nil` if the version could not be
          #   detected.
          #
          def banner_version(host=params[:host],port=params[:port],**kwargs)
            banner = tcp_banner(host,port,**kwargs)

            banner[Support::Text::Patterns::VERSION_NUMBER]
          end

          #
          # Attempts to detect the target system's software version from the
          # service's banner text.
          #
          # @return [String, nil]
          #   The detected version string or `nil` if the version could not be
          #   detected.
          #
          def detect_version
            banner_version
          end
        end
      end
    end
  end
end
