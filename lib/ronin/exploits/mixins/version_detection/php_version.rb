# frozen_string_literal: true
#
# ronin-exploits - A Ruby library for ronin-rb that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2024 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# ronin-exploits is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ronin-exploits is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with ronin-exploits.  If not, see <https://www.gnu.org/licenses/>.
#

require_relative '../version_detection'
require_relative '../http'

require 'ronin/support/text/patterns/software'

module Ronin
  module Exploits
    module Mixins
      module VersionDetection
        #
        # Attempts to detect the target system's PHP version from the HTTP
        # `X-Powered-By` header.
        #
        # @since 1.2.0
        #
        # @api public
        #
        module PHPVersion
          include VersionDetection

          #
          # Includes {HTTP} in the exploit including {PHPVersion}.
          #
          # @param [Class<Exploit>] exploit
          #   The exploit including {PHPVersion}.
          #
          # @api private
          #
          def self.included(exploit)
            exploit.include HTTP
          end

          #
          # Attempts to detect the target system's PHP version from the HTTP
          # `X-Powered-By` header.
          #
          # @param [String] path
          #   The path to create the HTTP request for.
          #
          # @param [Hash{Symbol => Object}] kwargs
          #   Additional keyword arguments for {HTTP#http_powered_by_header}.
          #
          # @return [String, nil]
          #   The detected version string or `nil` if the version could not be
          #   detected or the `X-Powered-By` header was not present.
          #
          # @api public
          #
          def php_version(path='/',**kwargs)
            header = http_powered_by_header(path,**kwargs)

            if header && header.start_with?('PHP/')
              header[Support::Text::Patterns::VERSION_NUMBER]
            end
          end

          #
          # Attempts to detect the target system's PHP version from the HTTP
          # `X-Powered-By` header.
          #
          # @return [String, nil]
          #   The detected version string or `nil` if the version could not be
          #   detected or the `X-Powered-By` header was not present.
          #
          # @see #php_version
          #
          # @api public
          #
          def detect_version
            php_version
          end
        end
      end
    end
  end
end
