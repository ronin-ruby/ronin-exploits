# frozen_string_literal: true
#
# ronin-exploits - A Ruby library for ronin-rb that provides exploitation and
# payload crafting functionality.
#
# Copyright (c) 2007-2024 Hal Brodigan (postmodern.mod3 at gmail.com)
#
# ronin-exploits is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ronin-exploits is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with ronin-exploits.  If not, see <https://www.gnu.org/licenses/>.
#

module Ronin
  module Exploits
    module Mixins
      #
      # Adds version detection methods.
      #
      # ## Examples
      #
      #     module Ronin
      #       module Exploits
      #         class MyExploit < Exploit
      #
      #           include Mixins::VersionDetection
      #
      #           def detect_version
      #             # version detection logic goes here
      #           end
      #
      #         end
      #       end
      #     end
      #
      # @api public
      #
      # @since 1.2.0
      #
      module VersionDetection
        #
        # Attempts to determine the software version of the target system.
        #
        # @return [String, nil]
        #   The detected version string or `nil` if the version could not be
        #   detected.
        #
        # @abstract
        #
        # @api public
        #
        def detect_version
        end

        #
        # Determines if the target system is running a vulnerable version of
        # software.
        #
        # @return [TestResult::Vulnerable, TestResult::NotVulnerable, TestResult::Unknown]
        #   Indicates whether the target system is running a vulnerable version
        #   of software.
        #
        #   * {TestResult::Vulnerable} - the software version was detected and
        #     is vulnerable.
        #   * {TestResult::NotVulnerable} - the software version was detected
        #     but is not vulnerable.
        #   * {TestResult::Unknown} - the software version could not be
        #     detected.
        #
        def test
          if (version = detect_version)
            if vulnerable_version?(version)
              Vulnerable("the target system is running a vulnerable version (#{version})")
            else
              NotVulnerable("the target system is not running a vulnerable version (#{version})")
            end
          else
            Unknown("cannot determine the software version of the target system")
          end
        end
      end
    end
  end
end
