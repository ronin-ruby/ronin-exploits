require 'spec_helper'
require 'ronin/exploits/target'

describe Ronin::Exploits::Target do
  it "must inherit from OpenStruct" do
    expect(described_class).to be < OpenStruct
  end

  describe "#initialize" do
    it "must default #arch to nil" do
      expect(subject.arch).to be(nil)
    end

    it "must default #os to nil" do
      expect(subject.os).to be(nil)
    end

    it "must default #os_version to nil" do
      expect(subject.os_version).to be(nil)
    end

    it "must default #software to nil" do
      expect(subject.software).to be(nil)
    end

    it "must default #software_version to nil" do
      expect(subject.software_version).to be(nil)
    end

    context "when given the arch: keyword argument" do
      let(:arch) { :x86_64 }

      subject { described_class.new(arch: arch) }

      it "must set #arch" do
        expect(subject.arch).to be(arch)
      end
    end

    context "when given the os: keyword argument" do
      let(:os) { :linux }

      subject { described_class.new(os: os) }

      it "must set #os" do
        expect(subject.os).to be(os)
      end
    end

    context "when given the os_version: keyword argument" do
      let(:os_version) { '5.17.0' }

      subject { described_class.new(os_version: os_version) }

      it "must set #os_version" do
        expect(subject.os_version).to be(os_version)
      end
    end

    context "when given the software: keyword argument" do
      let(:software) { 'Apache' }

      subject { described_class.new(software: software) }

      it "must set #software" do
        expect(subject.software).to be(software)
      end
    end

    context "when given the software_version: keyword argument" do
      let(:software_version) { '1.2.3' }

      subject { described_class.new(software_version: software_version) }

      it "must set #software_version to a new Ronin::Support::Software::VersionRange object" do
        expect(subject.software_version).to be_kind_of(Ronin::Support::Software::VersionRange)
        expect(subject.software_version.string).to eq(software_version)
      end

      context "but the software_version: value is a version range String" do
        let(:software_version) { '>= 1.2.3, < 2.0.0' }

        it "must accept and parse the version range String" do
          expect(subject.software_version).to be_kind_of(Ronin::Support::Software::VersionRange)
          expect(subject.software_version.string).to eq(software_version)
        end
      end
    end

    context "when given the version: keyword argument" do
      let(:version) { '1.2.3' }

      subject { described_class.new(version: version) }

      it "must set #software_version to a new Ronin::Support::Software::VersionRange object" do
        expect(subject.software_version).to be_kind_of(Ronin::Support::Software::VersionRange)
        expect(subject.software_version.string).to eq(version)
      end

      context "but the version: value is a version range String" do
        let(:version) { '>= 1.2.3, < 2.0.0' }

        it "must accept and parse the version range String" do
          expect(subject.software_version).to be_kind_of(Ronin::Support::Software::VersionRange)
          expect(subject.software_version.string).to eq(version)
        end
      end
    end

    context "when given additional keyword arguments" do
      let(:foo) { 42     }
      let(:bar) { 'data' }

      subject { described_class.new(foo: foo, bar: bar) }

      it "must populate the OpenStruct with them" do
        expect(subject.foo).to be(foo)
        expect(subject.bar).to be(bar)
      end
    end
  end

  describe "#version" do
    let(:software_version) { '1.2.3' }

    subject { described_class.new(software_version: software_version) }

    it "must be an alias for #software_version" do
      expect(subject.version).to eq(subject.software_version)
    end
  end
end
