require 'spec_helper'
require 'ronin/exploits/mixins/version_detection/banner_version'

require 'ronin/exploits/exploit'

describe Ronin::Exploits::Mixins::VersionDetection::BannerVersion do
  module TestBannerVersionMixin
    class TestExploit < Ronin::Exploits::Exploit

      include Ronin::Exploits::Mixins::VersionDetection::BannerVersion

    end
  end

  let(:test_class) { TestBannerVersionMixin::TestExploit }

  describe ".included" do
    subject { test_class }

    it "must also include Ronin::Exploits::Mixins::VersionDetection" do
      expect(subject).to include(Ronin::Exploits::Mixins::VersionDetection)
    end

    it "must also include Ronin::Exploits::Mixins::RemoteTCP" do
      expect(subject).to include(Ronin::Exploits::Mixins::RemoteTCP)
    end
  end

  let(:host) { '192.168.1.1' }
  let(:port) { 25 }

  subject do
    test_class.new(
      params: {
        host: host,
        port: port
      }
    )
  end

  describe "#banner_version" do
    context "when the banner string contains a version string" do
      let(:version) { '1.2.3' }
      let(:banner)  { "+ 200 FooBar SMTP server #{version} ready." }

      before do
        expect(subject).to receive(:tcp_banner).with(host,port).and_return(banner)
      end

      it "must return the version string" do
        expect(subject.banner_version).to eq(version)
      end
    end

    context "but the banner string does not contain any version string" do
      let(:banner) { "+ 200 Ready." }

      before do
        expect(subject).to receive(:tcp_banner).with(host,port).and_return(banner)
      end

      it "must return nil" do
        expect(subject.banner_version).to be(nil)
      end
    end

    context "when given a custom host argument" do
      let(:version) { '1.2.3' }
      let(:banner)  { "+ 200 FooBar SMTP server #{version} ready." }

      let(:other_host) { 'other.example.com' }

      it "must call #tcp_banner with the host argument and the 'port' param" do
        expect(subject).to receive(:tcp_banner).with(other_host,port).and_return(banner)

        expect(subject.banner_version(other_host)).to eq(version)
      end

      context "and with a custom port argument" do
        let(:other_port) { 1337 }

        it "must call #tcp_banner with the host and port arguments" do
          expect(subject).to receive(:tcp_banner).with(other_host,other_port).and_return(banner)

          expect(subject.banner_version(other_host,other_port)).to eq(version)
        end
      end
    end

    context "when given a custom bind_host: keyword argument" do
      let(:version) { '1.2.3' }
      let(:banner)  { "+ 200 FooBar SMTP server #{version} ready." }

      let(:bind_host) { '192.168.1.42' }

      it "must call #tcp_banner with the bind_host: keyword argument" do
        expect(subject).to receive(:tcp_banner).with(host,port, bind_host: bind_host).and_return(banner)

        expect(subject.banner_version(bind_host: bind_host)).to eq(version)
      end
    end

    context "when given a custom bind_port: keyword argument" do
      let(:version) { '1.2.3' }
      let(:banner)  { "+ 200 FooBar SMTP server #{version} ready." }

      let(:bind_port) { 1234 }

      it "must call #tcp_banner with the bind_host: keyword argument" do
        expect(subject).to receive(:tcp_banner).with(host,port, bind_port: bind_port).and_return(banner)

        expect(subject.banner_version(bind_port: bind_port)).to eq(version)
      end
    end
  end

  describe "#detect_version" do
    context "when the banner string contains a version string" do
      let(:version) { '1.2.3' }
      let(:banner)  { "+ 200 FooBar SMTP server #{version} ready." }

      before do
        expect(subject).to receive(:tcp_banner).and_return(banner)
      end

      it "must return the version string" do
        expect(subject.detect_version).to eq(version)
      end
    end

    context "but the banner string does not contain any version string" do
      let(:banner) { "+ 200 Ready." }

      before do
        expect(subject).to receive(:tcp_banner).and_return(banner)
      end

      it "must return nil" do
        expect(subject.detect_version).to be(nil)
      end
    end
  end
end
