require 'spec_helper'
require 'ronin/exploits/mixins/version_detection/http_server_version'

require 'ronin/exploits/exploit'

describe Ronin::Exploits::Mixins::VersionDetection::HTTPServerVersion do
  module TestHTTPServerVersionMixin
    class TestExploit < Ronin::Exploits::Exploit

      include Ronin::Exploits::Mixins::VersionDetection::HTTPServerVersion

    end
  end

  let(:test_class) { TestHTTPServerVersionMixin::TestExploit }

  describe ".included" do
    subject { test_class }

    it "must also include Ronin::Exploits::Mixins::VersionDetection" do
      expect(subject).to include(Ronin::Exploits::Mixins::VersionDetection)
    end

    it "must also include Ronin::Exploits::Mixins::HTTP" do
      expect(subject).to include(Ronin::Exploits::Mixins::HTTP)
    end
  end

  let(:base_url) { 'http://example.com/' }

  subject do
    test_class.new(params: {base_url: base_url})
  end

  describe "#http_server_version" do
    context "when the HTTP response contains the 'Server' header" do
      context "and it contains a version string" do
        let(:version) { '1.2.3' }
        let(:header)  { "Apache #{version}" }

        before do
          expect(subject).to receive(:http_server_header).with('/').and_return(header)
        end

        it "must return the version string" do
          expect(subject.http_server_version).to eq(version)
        end
      end

      context "but it does not contain a version string" do
        let(:header)  { "Apache foo bar" }

        before do
          expect(subject).to receive(:http_server_header).with('/').and_return(header)
        end

        it "must return nil" do
          expect(subject.http_server_version).to be(nil)
        end
      end
    end

    context "but the HTTP response does not contain the 'Server' header" do
      before do
        expect(subject).to receive(:http_server_header).with('/').and_return(nil)
      end

      it "must return nil" do
        expect(subject.http_server_version).to be(nil)
      end
    end

    context "when given a custom path argument" do
      let(:version) { '1.2.3' }
      let(:header)  { "Apache #{version}" }

      let(:path) { '/other' }

      it "must request the HTTP 'Server' header for that path" do
        expect(subject).to receive(:http_server_header).with(path).and_return(header)

        expect(subject.http_server_version(path)).to eq(version)
      end
    end

    context "when given custom keyword arguments" do
      let(:version) { '1.2.3' }
      let(:header)  { "Apache #{version}" }

      let(:cookie) { 'sessionid=1234abcd' }

      it "must pass those keyword arguments to #http_server_header" do
        expect(subject).to receive(:http_server_header).with('/', cookie: cookie).and_return(header)

        expect(subject.http_server_version(cookie: cookie)).to eq(version)
      end
    end
  end

  describe "#detect_version" do
    context "when the HTTP response contains the 'Server' header" do
      context "and it contains a version string" do
        let(:version) { '1.2.3' }
        let(:header)  { "Apache #{version}" }

        before do
          expect(subject).to receive(:http_server_header).and_return(header)
        end

        it "must return the version string" do
          expect(subject.detect_version).to eq(version)
        end
      end

      context "but it does not contain a version string" do
        let(:header)  { "Apache foo bar" }

        before do
          expect(subject).to receive(:http_server_header).and_return(header)
        end

        it "must return nil" do
          expect(subject.detect_version).to be(nil)
        end
      end
    end

    context "but the HTTP response does not contain the 'Server' header" do
      before do
        expect(subject).to receive(:http_server_header).and_return(nil)
      end

      it "must return nil" do
        expect(subject.detect_version).to be(nil)
      end
    end
  end
end
