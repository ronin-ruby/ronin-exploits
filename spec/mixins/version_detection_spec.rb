require 'spec_helper'
require 'ronin/exploits/mixins/version_detection'

require 'ronin/exploits/exploit'

describe Ronin::Exploits::Mixins::VersionDetection do
  module TestVersionDetectionMixin
    class TestExploit < Ronin::Exploits::Exploit

      include Ronin::Exploits::Mixins::VersionDetection

      software_versions [
        '>= 1.2.3, < 2.0.0',
        '>= 2.3.4, < 2.5.1'
      ]
    end
  end

  let(:test_class) { TestVersionDetectionMixin::TestExploit }

  subject { test_class.new }

  describe "#detect_version" do
    it "must return nil by default" do
      expect(subject.detect_version).to be(nil)
    end
  end

  describe "#test" do
    context "when #detect_version returns a String" do
      context "and it's a vulnerable version" do
        let(:detected_version) { '2.4.2' }

        before do
          expect(subject).to receive(:detect_version).and_return(detected_version)
        end

        it "must return Ronin::Exploits::TestResult::Vulnerable" do
          result = subject.test

          expect(result).to be_kind_of(Ronin::Exploits::TestResult::Vulnerable)
          expect(result.message).to eq("the target system is running a vulnerable version (#{detected_version})")
        end
      end

      context "but it's not a vulnerable version" do
        let(:detected_version) { '3.0.0' }

        before do
          expect(subject).to receive(:detect_version).and_return(detected_version)
        end

        it "must return Ronin::Exploits::TestResult::NotVulnerable" do
          result = subject.test

          expect(result).to be_kind_of(Ronin::Exploits::TestResult::NotVulnerable)
          expect(result.message).to eq("the target system is not running a vulnerable version (#{detected_version})")
        end
      end
    end

    context "when #detect_version returns nil" do
      it "must return Ronin::Exploits::TestResult::Unknown" do
        result = subject.test

        expect(result).to be_kind_of(Ronin::Exploits::TestResult::Unknown)
        expect(result.message).to eq("cannot determine the software version of the target system")
      end
    end
  end
end
