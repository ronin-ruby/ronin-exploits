require 'spec_helper'
require 'ronin/exploits/cli/text'
require 'ronin/exploits/cli/command'

require 'ronin/exploits/exploit'
require 'ronin/exploits/auth_bypass'
require 'ronin/exploits/path_traversal'
require 'ronin/exploits/memory_corruption'
require 'ronin/exploits/stack_overflow'
require 'ronin/exploits/seh_overflow'
require 'ronin/exploits/heap_overflow'
require 'ronin/exploits/use_after_free'
require 'ronin/exploits/web'
require 'ronin/exploits/lfi'
require 'ronin/exploits/rfi'
require 'ronin/exploits/sqli'
require 'ronin/exploits/xss'
require 'ronin/exploits/open_redirect'
require 'ronin/exploits/ssti'

describe Ronin::Exploits::CLI::Text do
  module TestCLIText
    class ExampleExploit < Ronin::Exploits::Exploit

      id 'exaple_exploit'

      param :foo, String, required: true, desc: 'Foo param'
      param :bar, Integer, required: true, desc: 'Bar param'
      param :baz, Integer, desc: 'Baz param'

    end
  end

  let(:exploit_class) { TestCLIText::ExampleExploit }

  module TestCLIText
    class TestCommand < Ronin::Exploits::CLI::Command
      include Ronin::Exploits::CLI::Text
    end
  end

  let(:test_command) { TestCLIText::TestCommand }
  subject { test_command.new }

  describe "#exploit_type_name" do
    {
      Ronin::Exploits::Exploit          => 'Custom',
      Ronin::Exploits::AuthBypass       => 'Auth Bypass',
      Ronin::Exploits::PathTraversal    => 'Path Traversal',
      Ronin::Exploits::MemoryCorruption => 'Memory Corruption',
      Ronin::Exploits::StackOverflow    => 'Stack Overflow',
      Ronin::Exploits::SEHOverflow      => 'SEH Overflow',
      Ronin::Exploits::HeapOverflow     => 'Heap Overflow',
      Ronin::Exploits::UseAfterFree     => 'Use After Free',
      Ronin::Exploits::Web              => 'Web',
      Ronin::Exploits::LFI              => 'Local File Inclusion (LFI)',
      Ronin::Exploits::RFI              => 'Remote File Inclusion (RFI)',
      Ronin::Exploits::SQLI             => 'SQL injection (SQLI)',
      Ronin::Exploits::XSS              => 'Cross-Site Scripting (XSS)',
      Ronin::Exploits::OpenRedirect     => 'Open Redirect',
      Ronin::Exploits::SSTI             => 'Server-Side Template Injection (SSTI)'
    }.each do |exploit_class,type|
      context "when the class inherits from #{exploit_class}" do
        let(:klass) { Class.new(exploit_class) }
        let(:type)  { type }

        it "must return '#{type}'" do
          expect(subject.exploit_type_name(klass)).to eq(type)
        end
      end
    end
  end

  describe "#example_exploit_command" do
    context "when given a exploit class with no params" do
      module TestCLIText
        class ExploitWithNoParams < Ronin::Exploits::Exploit

          id 'exploit_with_no_params'

        end
      end

      let(:exploit_class) { TestCLIText::ExploitWithNoParams }

      it "must return 'ronin-exploits run ...' with the exploit class ID" do
        expect(subject.example_exploit_command(exploit_class)).to eq(
          "ronin-exploits run #{exploit_class.id}"
        )
      end
    end

    context "but the exploit class does have params" do
      context "and none of them are required" do
        module TestCLIText
          class ExploitWithOptionalParams < Ronin::Exploits::Exploit

            id 'exploit_with_optional_params'

            param :foo, String, desc: 'Foo param'
            param :bar, Integer, desc: 'Bar param'

          end
        end

        let(:exploit_class) { TestCLIText::ExploitWithOptionalParams }

        it "must not add any '-p' flags to the 'ronin-exploits build' command" do
          expect(subject.example_exploit_command(exploit_class)).to eq(
            "ronin-exploits run #{exploit_class.id}"
          )
        end
      end

      context "and they all have default values" do
        module TestCLIText
          class ExploitWithDefaultParams < Ronin::Exploits::Exploit

            id 'exploit_with_default_params'

            param :foo, String, default: 'foo',
                                desc:    'Foo param'

            param :bar, Integer, default: 42,
                                 desc:    'Bar param'

          end
        end

        let(:exploit_class) { TestCLIText::ExploitWithDefaultParams }

        it "must not add any '-p' flags to the 'ronin-exploits build' command" do
          expect(subject.example_exploit_command(exploit_class)).to eq(
            "ronin-exploits run #{exploit_class.id}"
          )
        end
      end

      context "and some are required" do
        context "but they also have default values" do
          module TestCLIText
            class ExploitWithRequiredAndDefaultParams < Ronin::Exploits::Exploit

              id 'exploit_with_required_and_default_params'

              param :foo, String, required: true,
                                  default:  'foo',
                                  desc:     'Foo param'

              param :bar, Integer, required: true,
                                   default:  42,
                                   desc:     'Bar param'

            end
          end

          let(:exploit_class) { TestCLIText::ExploitWithRequiredAndDefaultParams }

          it "must not add any '-p' flags to the 'ronin-exploits build' command" do
            expect(subject.example_exploit_command(exploit_class)).to eq(
              "ronin-exploits run #{exploit_class.id}"
            )
          end
        end

        context "but some are required and have no default values" do
          module TestCLIText
            class ExploitWithRequiredParams < Ronin::Exploits::Exploit

              id 'exploit_with_required_params'

              param :foo, String, required: true, desc: 'Foo param'
              param :bar, Integer, required: true, desc: 'Bar param'
              param :baz, Integer, desc: 'Baz param'

            end
          end

          let(:exploit_class) { TestCLIText::ExploitWithRequiredParams }

          it "must add '-p' flags followed by the param name and usage to the 'ronin-exploits build' command" do
            expect(subject.example_exploit_command(exploit_class)).to eq(
              "ronin-exploits run #{exploit_class.id} -p foo=FOO -p bar=NUM"
            )
          end
        end
      end
    end

    context "when the file: keyword argument is given" do
      let(:file) { 'path/to/exploit.rb' }

      it "must return a 'ronin-exploits run --file ...' command with the exploit file" do
        expect(subject.example_exploit_command(exploit_class, file: file)).to eq(
          "ronin-exploits run -f #{file} -p foo=FOO -p bar=NUM"
        )
      end
    end
  end
end
